<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小傻瓜别回头</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tlylft.github.io/"/>
  <updated>2021-02-08T04:34:44.149Z</updated>
  <id>https://tlylft.github.io/</id>
  
  <author>
    <name>Icey</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>似然函数,最大似然估计</title>
    <link href="https://tlylft.github.io/math/likelihood/"/>
    <id>https://tlylft.github.io/math/likelihood/</id>
    <published>2021-02-08T04:33:46.000Z</published>
    <updated>2021-02-08T04:34:44.149Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/75731049" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/75731049</a><br><a href="https://www.zhihu.com/question/54082000" target="_blank" rel="noopener">https://www.zhihu.com/question/54082000</a><br><a href="https://blog.csdn.net/weixin_44940258/article/details/109731281" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44940258/article/details/109731281</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/75731049&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/75731049&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="math" scheme="https://tlylft.github.io/categories/math/"/>
    
    
      <category term="math" scheme="https://tlylft.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib实时动态图</title>
    <link href="https://tlylft.github.io/python/matplotlib/dynamic_plot/"/>
    <id>https://tlylft.github.io/python/matplotlib/dynamic_plot/</id>
    <published>2021-02-01T13:14:58.000Z</published>
    <updated>2021-02-05T02:32:51.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matplotlib实时动态图"><a href="#matplotlib实时动态图" class="headerlink" title="matplotlib实时动态图"></a>matplotlib实时动态图</h1><h2 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from IPython import display # 引用前端展示模块</span><br><span class="line">%matplotlib inline      #保证notebook内展示</span><br><span class="line">plt.ion()   # 这是实时展示的开关</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for t in range(400):</span><br><span class="line">    prediction &#x3D; net(x)     # input x and predict based on x</span><br><span class="line"></span><br><span class="line">    loss &#x3D; loss_func(prediction, y)     # must be (1. nn output, 2. target)</span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()   # clear gradients for next train</span><br><span class="line">    loss.backward()         # backpropagation, compute gradients</span><br><span class="line">    optimizer.step()        # apply gradients</span><br><span class="line"></span><br><span class="line">    if t % 10 &#x3D;&#x3D; 0:</span><br><span class="line">        # plot and show learning process</span><br><span class="line">        plt.cla()</span><br><span class="line">        plt.scatter(x.numpy(), y.numpy())</span><br><span class="line">        plt.plot(x.numpy(), prediction.data.numpy(), &#39;r-&#39;, lw&#x3D;5)</span><br><span class="line">        plt.text(0.5, 0, &#39;Loss&#x3D;%.4f&#39; % loss.data.numpy(), fontdict&#x3D;&#123;&#39;size&#39;: 20, &#39;color&#39;:  &#39;red&#39;&#125;)</span><br><span class="line">        </span><br><span class="line">        plt.pause(0.1)</span><br><span class="line">        display.clear_output(wait&#x3D;True) # notebook中使用</span><br><span class="line"></span><br><span class="line">plt.ioff() #关闭实时展示</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;matplotlib实时动态图&quot;&gt;&lt;a href=&quot;#matplotlib实时动态图&quot; class=&quot;headerlink&quot; title=&quot;matplotlib实时动态图&quot;&gt;&lt;/a&gt;matplotlib实时动态图&lt;/h1&gt;&lt;h2 id=&quot;jupyter-noteb
      
    
    </summary>
    
    
      <category term="python" scheme="https://tlylft.github.io/categories/python/"/>
    
      <category term="matplotlib" scheme="https://tlylft.github.io/categories/python/matplotlib/"/>
    
    
      <category term="python" scheme="https://tlylft.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="https://tlylft.github.io/python/matplotlib/subplot/"/>
    <id>https://tlylft.github.io/python/matplotlib/subplot/</id>
    <published>2021-02-01T13:04:45.000Z</published>
    <updated>2021-02-01T13:14:30.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="subplot"><a href="#subplot" class="headerlink" title="subplot"></a>subplot</h1><h2 id="1-demo1"><a href="#1-demo1" class="headerlink" title="1. demo1"></a>1. demo1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F <span class="comment"># 激活函数在这里</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h3 id="1-1-Firstly-generate-some-fake-data"><a href="#1-1-Firstly-generate-some-fake-data" class="headerlink" title="1.1. Firstly generate some fake data"></a>1.1. Firstly generate some fake data</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.linspace(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">200</span>)  <span class="comment"># x data (tensor), shape=(200, 1)</span></span><br><span class="line">x_np = x.numpy()</span><br><span class="line">print(x.data)</span><br></pre></td></tr></table></figure><pre><code>tensor([-5.0000, -4.9497, -4.8995, -4.8492, -4.7990, -4.7487, -4.6985, -4.6482,        -4.5980, -4.5477, -4.4975, -4.4472, -4.3970, -4.3467, -4.2965, -4.2462,        -4.1960, -4.1457, -4.0955, -4.0452, -3.9950, -3.9447, -3.8945, -3.8442,        -3.7940, -3.7437, -3.6935, -3.6432, -3.5930, -3.5427, -3.4925, -3.4422,        -3.3920, -3.3417, -3.2915, -3.2412, -3.1910, -3.1407, -3.0905, -3.0402,        -2.9899, -2.9397, -2.8894, -2.8392, -2.7889, -2.7387, -2.6884, -2.6382,        -2.5879, -2.5377, -2.4874, -2.4372, -2.3869, -2.3367, -2.2864, -2.2362,        -2.1859, -2.1357, -2.0854, -2.0352, -1.9849, -1.9347, -1.8844, -1.8342,        -1.7839, -1.7337, -1.6834, -1.6332, -1.5829, -1.5327, -1.4824, -1.4322,        -1.3819, -1.3317, -1.2814, -1.2312, -1.1809, -1.1307, -1.0804, -1.0302,        -0.9799, -0.9296, -0.8794, -0.8291, -0.7789, -0.7286, -0.6784, -0.6281,        -0.5779, -0.5276, -0.4774, -0.4271, -0.3769, -0.3266, -0.2764, -0.2261,        -0.1759, -0.1256, -0.0754, -0.0251,  0.0251,  0.0754,  0.1256,  0.1759,         0.2261,  0.2764,  0.3266,  0.3769,  0.4271,  0.4774,  0.5276,  0.5779,         0.6281,  0.6784,  0.7286,  0.7789,  0.8291,  0.8794,  0.9296,  0.9799,         1.0302,  1.0804,  1.1307,  1.1809,  1.2312,  1.2814,  1.3317,  1.3819,         1.4322,  1.4824,  1.5327,  1.5829,  1.6332,  1.6834,  1.7337,  1.7839,         1.8342,  1.8844,  1.9347,  1.9849,  2.0352,  2.0854,  2.1357,  2.1859,         2.2362,  2.2864,  2.3367,  2.3869,  2.4372,  2.4874,  2.5377,  2.5879,         2.6382,  2.6884,  2.7387,  2.7889,  2.8392,  2.8894,  2.9397,  2.9899,         3.0402,  3.0905,  3.1407,  3.1910,  3.2412,  3.2915,  3.3417,  3.3920,         3.4422,  3.4925,  3.5427,  3.5930,  3.6432,  3.6935,  3.7437,  3.7940,         3.8442,  3.8945,  3.9447,  3.9950,  4.0452,  4.0955,  4.1457,  4.1960,         4.2462,  4.2965,  4.3467,  4.3970,  4.4472,  4.4975,  4.5477,  4.5980,         4.6482,  4.6985,  4.7487,  4.7990,  4.8492,  4.8995,  4.9497,  5.0000])</code></pre><h3 id="1-2-Following-are-popular-activation-functions"><a href="#1-2-Following-are-popular-activation-functions" class="headerlink" title="1.2. Following are popular activation functions"></a>1.2. Following are popular activation functions</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">y_relu = F.relu(x).numpy()</span><br><span class="line">y_sigmoid = torch.sigmoid(x).numpy()</span><br><span class="line">y_tanh = torch.tanh(x).numpy()</span><br><span class="line">y_softplus = F.softplus(x).numpy()</span><br><span class="line"></span><br><span class="line">y_softmax = F.softmax(x,dim=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># softmax is a special kind of activation function, it is about probability</span></span><br><span class="line"><span class="comment"># and will make the sum as 1.</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;torch.Tensor&#39;&gt;</code></pre><h3 id="1-3-Plot-to-visualize-these-activation-function"><a href="#1-3-Plot-to-visualize-these-activation-function" class="headerlink" title="1.3. Plot to visualize these activation function"></a>1.3. Plot to visualize these activation function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">321</span>)</span><br><span class="line">plt.plot(x_np, y_relu, c=<span class="string">'red'</span>, label=<span class="string">'relu'</span>)</span><br><span class="line">plt.ylim((<span class="number">-1</span>, <span class="number">5</span>))</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">322</span>)</span><br><span class="line">plt.plot(x_np, y_sigmoid, c=<span class="string">'red'</span>, label=<span class="string">'sigmoid'</span>)</span><br><span class="line">plt.ylim((<span class="number">-0.2</span>, <span class="number">1.2</span>))</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">323</span>)</span><br><span class="line">plt.plot(x_np, y_tanh, c=<span class="string">'red'</span>, label=<span class="string">'tanh'</span>)</span><br><span class="line">plt.ylim((<span class="number">-1.2</span>, <span class="number">1.2</span>))</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">324</span>)</span><br><span class="line">plt.plot(x_np, y_softplus, c=<span class="string">'red'</span>, label=<span class="string">'softplus'</span>)</span><br><span class="line">plt.ylim((<span class="number">-0.2</span>, <span class="number">6</span>))</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">325</span>)</span><br><span class="line">plt.plot(x_np, y_softmax, c=<span class="string">'red'</span>, label=<span class="string">'softmax'</span>)</span><br><span class="line"><span class="comment"># plt.ylim((-0.05, 0.05))</span></span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/python/matplotlib/subplot/2021-02-01-21-11-58.png" alt></p><h2 id="2-demo2"><a href="#2-demo2" class="headerlink" title="2. demo2"></a>2. demo2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x &#x3D; np.linspace(1, 2, 2)</span><br><span class="line">y1 &#x3D; np.sin(x)</span><br><span class="line"></span><br><span class="line">y2 &#x3D; np.cos(x)</span><br><span class="line"></span><br><span class="line">ax1 &#x3D; plt.subplot(2, 2, 1, frameon &#x3D; False) # 两行一列，位置是1的子图</span><br><span class="line">plt.plot(x, y1, &#39;b--&#39;)</span><br><span class="line">plt.ylabel(&#39;y1&#39;)</span><br><span class="line">ax2 &#x3D; plt.subplot(2, 2, 2, projection &#x3D; &#39;polar&#39;)</span><br><span class="line">plt.plot(x, y2, &#39;r--&#39;)</span><br><span class="line">plt.ylabel(&#39;y2&#39;)</span><br><span class="line">plt.xlabel(&#39;x&#39;)</span><br><span class="line">plt.subplot(2, 2, 3, sharex &#x3D; ax1, facecolor &#x3D; &#39;red&#39;)</span><br><span class="line">plt.plot(x, y2, &#39;r--&#39;)</span><br><span class="line">plt.ylabel(&#39;y2&#39;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/python/matplotlib/subplot/2021-02-01-21-13-13.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;subplot&quot;&gt;&lt;a href=&quot;#subplot&quot; class=&quot;headerlink&quot; title=&quot;subplot&quot;&gt;&lt;/a&gt;subplot&lt;/h1&gt;&lt;h2 id=&quot;1-demo1&quot;&gt;&lt;a href=&quot;#1-demo1&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux重定向</title>
    <link href="https://tlylft.github.io/linux/linux_redistinct/"/>
    <id>https://tlylft.github.io/linux/linux_redistinct/</id>
    <published>2021-02-01T05:12:25.000Z</published>
    <updated>2021-02-01T05:12:47.931Z</updated>
    
    <content type="html"><![CDATA[<p>Linux的3种重定向<br>0:表示标准输入<br>1:标准输出,在一般使用时，默认的是标准输出<br>2:标准错误信息输出</p><p>只输出错误信息到日志文件<br>nohup ./program &gt;/dev/null 2&gt;log &amp;<br>什么信息也不要<br>nohup ./program &gt;/dev/null 2&gt;&amp;1 &amp;<br>知识补充，关于Linux的重定向</p><p>可以用来指定需要重定向的标准输入或输出。例如，将某个程序的错误信息输出到log文件 中：./program 2&gt;log。这样标准输出还是在屏幕上，但是错误信息会输出到log文件中。另外，也可 以实现0，1，2之间的重定向。2&gt;&amp;1：将错误信息重定向到标准输出。<br>关于/dev/null文件<br>Linux下还有一个特殊的文件/dev/null，它就像一个无底洞，所有重定向到它的信息都会消失得无影 无踪。这一点非常有用，当我们不需要回显程序的所有信息时，就可以将输出重定向到/dev/null。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux的3种重定向&lt;br&gt;0:表示标准输入&lt;br&gt;1:标准输出,在一般使用时，默认的是标准输出&lt;br&gt;2:标准错误信息输出&lt;/p&gt;
&lt;p&gt;只输出错误信息到日志文件&lt;br&gt;nohup ./program &amp;gt;/dev/null 2&amp;gt;log &amp;amp;&lt;br&gt;什么
      
    
    </summary>
    
    
      <category term="linux" scheme="https://tlylft.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://tlylft.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux centos7 磁盘扩容</title>
    <link href="https://tlylft.github.io/linux/linux_disk/"/>
    <id>https://tlylft.github.io/linux/linux_disk/</id>
    <published>2021-02-01T04:36:26.000Z</published>
    <updated>2021-02-01T04:44:11.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@NLP-Centos ~]# df -h</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs         56G     0   56G    0% &#x2F;dev</span><br><span class="line">tmpfs            56G     0   56G    0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs            56G  9.1M   56G    1% &#x2F;run</span><br><span class="line">tmpfs            56G     0   56G    0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;sda2        30G  3.8G   26G   13% &#x2F;</span><br><span class="line">&#x2F;dev&#x2F;sda1       497M   92M  406M   19% &#x2F;boot</span><br><span class="line">&#x2F;dev&#x2F;sdb1       725G   73M  688G    1% &#x2F;mnt&#x2F;resource</span><br><span class="line">tmpfs            12G  8.0K   12G    1% &#x2F;run&#x2F;user&#x2F;1000</span><br></pre></td></tr></table></figure><h2 id="挂载盘扩容"><a href="#挂载盘扩容" class="headerlink" title="挂载盘扩容"></a>挂载盘扩容</h2><p><a href="https://docs.azure.cn/zh-cn/articles/compute/aog-virtual-machines-qa-linux-root-file-system-extension" target="_blank" rel="noopener">https://docs.azure.cn/zh-cn/articles/compute/aog-virtual-machines-qa-linux-root-file-system-extension</a><br><a href="https://blog.csdn.net/qq825545356/article/details/93619434" target="_blank" rel="noopener">https://blog.csdn.net/qq825545356/article/details/93619434</a></p><p>打开分区表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">[root@NLP-Centos ~]# fdisk &#x2F;dev&#x2F;sda</span><br><span class="line"></span><br><span class="line">The device presents a logical sector size that is smaller than</span><br><span class="line">the physical sector size. Aligning to a physical sector (or optimal</span><br><span class="line">I&#x2F;O) size boundary is recommended, or performance may be impacted.</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：m</span><br><span class="line">命令操作</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit bsd disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line">   d   delete a partition</span><br><span class="line">   g   create a new empty GPT partition table</span><br><span class="line">   G   create an IRIX (SGI) partition table</span><br><span class="line">   l   list known partition types</span><br><span class="line">   m   print this menu</span><br><span class="line">   n   add a new partition</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   p   print the partition table</span><br><span class="line">   q   quit without saving changes</span><br><span class="line">   s   create a new empty Sun disklabel</span><br><span class="line">   t   change a partition&#39;s system id</span><br><span class="line">   u   change display&#x2F;entry units</span><br><span class="line">   v   verify the partition table</span><br><span class="line">   w   write table to disk and exit</span><br><span class="line">   x   extra functionality (experts only)</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：p</span><br><span class="line"></span><br><span class="line">磁盘 &#x2F;dev&#x2F;sda：214.7 GB, 214748364800 字节，419430400 个扇区</span><br><span class="line">Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes</span><br><span class="line">扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 4096 字节</span><br><span class="line">I&#x2F;O 大小(最小&#x2F;最佳)：4096 字节 &#x2F; 4096 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x000c35bb</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">&#x2F;dev&#x2F;sda1   *        2048     1026047      512000   83  Linux</span><br><span class="line">&#x2F;dev&#x2F;sda2         1026048    62914559    30944256   83  Linux</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：d</span><br><span class="line">分区号 (1,2，默认 2)：2</span><br><span class="line">分区 2 已删除</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：p</span><br><span class="line"></span><br><span class="line">磁盘 &#x2F;dev&#x2F;sda：214.7 GB, 214748364800 字节，419430400 个扇区</span><br><span class="line">Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes</span><br><span class="line">扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 4096 字节</span><br><span class="line">I&#x2F;O 大小(最小&#x2F;最佳)：4096 字节 &#x2F; 4096 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x000c35bb</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">&#x2F;dev&#x2F;sda1   *        2048     1026047      512000   83  Linux</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">分区号 (2-4，默认 2)：2</span><br><span class="line">起始 扇区 (1026048-419430399，默认为 1026048)：</span><br><span class="line">将使用默认值 1026048</span><br><span class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (1026048-419430399，默认为 419430399)：</span><br><span class="line">将使用默认值 419430399</span><br><span class="line">分区 2 已设置为 Linux 类型，大小设为 199.5 GiB</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：p</span><br><span class="line"></span><br><span class="line">磁盘 &#x2F;dev&#x2F;sda：214.7 GB, 214748364800 字节，419430400 个扇区</span><br><span class="line">Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes</span><br><span class="line">扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 4096 字节</span><br><span class="line">I&#x2F;O 大小(最小&#x2F;最佳)：4096 字节 &#x2F; 4096 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x000c35bb</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">&#x2F;dev&#x2F;sda1   *        2048     1026047      512000   83  Linux</span><br><span class="line">&#x2F;dev&#x2F;sda2         1026048   419430399   209202176   83  Linux</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：wr</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot or after you run partprobe(8) or kpartx(8)</span><br><span class="line">正在同步磁盘。</span><br></pre></td></tr></table></figure></p><h2 id="重启后"><a href="#重启后" class="headerlink" title="重启后"></a>重启后</h2><p>还没有改变，需要修改根文件系统的大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[nlpadmin@NLP-Centos ~]$ sudo xfs_growfs &#x2F;dev&#x2F;sda2</span><br><span class="line">meta-data&#x3D;&#x2F;dev&#x2F;sda2              isize&#x3D;512    agcount&#x3D;4, agsize&#x3D;1934016 blks</span><br><span class="line">         &#x3D;                       sectsz&#x3D;512   attr&#x3D;2, projid32bit&#x3D;1</span><br><span class="line">         &#x3D;                       crc&#x3D;1        finobt&#x3D;0 spinodes&#x3D;0</span><br><span class="line">data     &#x3D;                       bsize&#x3D;4096   blocks&#x3D;7736064, imaxpct&#x3D;25</span><br><span class="line">         &#x3D;                       sunit&#x3D;0      swidth&#x3D;0 blks</span><br><span class="line">naming   &#x3D;version 2              bsize&#x3D;4096   ascii-ci&#x3D;0 ftype&#x3D;1</span><br><span class="line">log      &#x3D;internal               bsize&#x3D;4096   blocks&#x3D;3777, version&#x3D;2</span><br><span class="line">         &#x3D;                       sectsz&#x3D;512   sunit&#x3D;0 blks, lazy-count&#x3D;1</span><br><span class="line">realtime &#x3D;none                   extsz&#x3D;4096   blocks&#x3D;0, rtextents&#x3D;0</span><br><span class="line">data blocks changed from 7736064 to 52300544</span><br><span class="line">[nlpadmin@NLP-Centos ~]$ df -Th</span><br><span class="line">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs       devtmpfs   56G     0   56G    0% &#x2F;dev</span><br><span class="line">tmpfs          tmpfs      56G     0   56G    0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs          tmpfs      56G  9.0M   56G    1% &#x2F;run</span><br><span class="line">tmpfs          tmpfs      56G     0   56G    0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;sda2      xfs       200G  3.8G  196G    2% &#x2F;</span><br><span class="line">&#x2F;dev&#x2F;sda1      xfs       497M   92M  406M   19% &#x2F;boot</span><br><span class="line">&#x2F;dev&#x2F;sdb1      ext4      725G   73M  688G    1% &#x2F;mnt&#x2F;resource</span><br><span class="line">tmpfs          tmpfs      12G     0   12G    0% &#x2F;run&#x2F;user&#x2F;1000</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看&quot;&gt;&lt;a href=&quot;#查看&quot; class=&quot;headerlink&quot; title=&quot;查看&quot;&gt;&lt;/a&gt;查看&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="linux" scheme="https://tlylft.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://tlylft.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos7 xfce xrdp远程桌面</title>
    <link href="https://tlylft.github.io/linux/centos7_desktop/"/>
    <id>https://tlylft.github.io/linux/centos7_desktop/</id>
    <published>2021-01-27T03:02:49.000Z</published>
    <updated>2021-01-27T03:10:46.584Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bhoold/p/12266499.html" target="_blank" rel="noopener">https://www.cnblogs.com/bhoold/p/12266499.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装桌面协议</span><br><span class="line">yum groupinstall &quot;X Window system&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装包含xfce的yum源</span><br><span class="line">yum install epel-release</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装xfce桌面</span><br><span class="line">yum groupinstall xfce</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 进入图形模式(如果是远程连接无效果)</span><br><span class="line">systemctl isolate graphical.target</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装基本字体(安装一个即可)</span><br><span class="line">yum install cjkuni-ukai-fonts &#x2F;&#x2F;楷体</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装输入法</span><br><span class="line">yum install fcitx*</span><br><span class="line">yum install im-chooser</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装浏览器</span><br><span class="line">yum install firefox</span><br><span class="line">yum install https:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;direct&#x2F;google-chrome-stable_current_x86_64.rpm &#x2F;&#x2F;必须用yum安装rpm才不会出现以来问题</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开启桌面远程连接服务</span><br><span class="line">vi ~&#x2F;.Xclients &#x2F;&#x2F; 编辑远程桌面配置文件(用户主目录有这个文件远程连接才不会黑屏闪退)</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">XFCE&#x3D;&quot;$(which xfce4-session 2&gt;&#x2F;dev&#x2F;null)&quot;</span><br><span class="line">exec &quot;$XFCE&quot;</span><br><span class="line"></span><br><span class="line">chmod +x ~&#x2F;.Xclients &#x2F;&#x2F; 修改属性</span><br><span class="line"></span><br><span class="line">yum install -y xrdp tigervnc tigervnc-server &#x2F;&#x2F; 安装服务</span><br><span class="line">systemctl start xrdp &#x2F;&#x2F; 启动服务</span><br><span class="line">systemctl enable xrdp &#x2F;&#x2F; 开机启动</span><br><span class="line">systemctl status xrdp.service &#x2F;&#x2F; 查看服务状态</span><br><span class="line">netstat -antup|grep xrdp &#x2F;&#x2F; 查看服务端口</span><br><span class="line">firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;3389&#x2F;tcp &#x2F;&#x2F; 防火墙规则</span><br><span class="line">firewall-cmd --reload &#x2F;&#x2F; 重载规则</span><br><span class="line">chcon -t bin_t &#x2F;usr&#x2F;sbin&#x2F;xrdp &#x2F;&#x2F; SELinux放行</span><br><span class="line">chcon -t bin_t &#x2F;usr&#x2F;sbin&#x2F;xrdp-sesman &#x2F;&#x2F; SELinux放行</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bhoold/p/12266499.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/bhoold/p/12266499.html&lt;/a
      
    
    </summary>
    
    
      <category term="linux" scheme="https://tlylft.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>云主机搭建jupyter</title>
    <link href="https://tlylft.github.io/linux/linux_jupyter/"/>
    <id>https://tlylft.github.io/linux/linux_jupyter/</id>
    <published>2021-01-27T02:08:35.000Z</published>
    <updated>2021-02-02T05:19:16.038Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_23845067/article/details/80474003" target="_blank" rel="noopener">https://blog.csdn.net/qq_23845067/article/details/80474003</a></p><ol><li><p>安装anaconda</p></li><li><p>python运行，设置密码，获取秘钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#导入设定密码模块</span><br><span class="line">from notebook.auth import passwd</span><br><span class="line"># 生成密码</span><br><span class="line">passwd()</span><br><span class="line">#输入密码，并且验证输入密码</span><br><span class="line">#输入两次之后，会生成一个加密字符串，将其复制下来</span><br><span class="line">#退出python环境，ctrl+d</span><br></pre></td></tr></table></figure></li><li><p>生成配置文件,修改配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br><span class="line">vi &#x2F;root&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 设定ip访问，允许任意ip访问</span><br><span class="line">c.NotebookApp.ip &#x3D; ‘*’</span><br><span class="line"># 不打开浏览器</span><br><span class="line">c.NotebookApp.open_browser &#x3D; False</span><br><span class="line"># 用于访问的端口，设定一个不用的端口即可，这里设置为7000</span><br><span class="line">c.NotebookApp.port &#x3D; 8888</span><br><span class="line"># 设置登录密码， 将刚刚复制的秘钥内容替换此处的xxx</span><br><span class="line">c.NotebookApp.password &#x3D; u&#39;sha1:bcd259ccf...&lt;your hashed password here&gt;&#39;</span><br><span class="line"># 配置项目文件夹，存储jupyter note和其他文件</span><br><span class="line">c.NotebookApp.notebook_dir &#x3D; u’jupyter’</span><br></pre></td></tr></table></figure></li><li><p>启动服务<br>nohup jupyter notebook —allow-root 2&gt;/data/logs/jupyter.nohup &amp;</p></li><li><p>开机自动启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root: vi &#x2F;etc&#x2F;rc.d&#x2F;rc.local</span><br><span class="line">添加安装python环境的用户启动服务命令：</span><br><span class="line">su - nlpadmin -c &quot;ah &#x2F;data&#x2F;software&#x2F;cmd&#x2F;jupyter_startup.sh&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_23845067/article/details/80474003&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_23845067/art
      
    
    </summary>
    
    
      <category term="linux" scheme="https://tlylft.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://tlylft.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>分词工具对比</title>
    <link href="https://tlylft.github.io/NLP/segment/seg_compare/"/>
    <id>https://tlylft.github.io/NLP/segment/seg_compare/</id>
    <published>2021-01-26T05:54:18.000Z</published>
    <updated>2021-01-26T06:06:44.910Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/66495302" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/66495302</a></p><p>snownlp:<br><a href="https://github.com/isnowfy/snownlp" target="_blank" rel="noopener">https://github.com/isnowfy/snownlp</a><br><a href="https://zhuanlan.zhihu.com/p/101493588" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/101493588</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/66495302&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/66495302&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;snownlp:&lt;
      
    
    </summary>
    
    
      <category term="nlp" scheme="https://tlylft.github.io/categories/nlp/"/>
    
    
      <category term="nlp" scheme="https://tlylft.github.io/tags/nlp/"/>
    
  </entry>
  
  <entry>
    <title>python唯一请求码生成</title>
    <link href="https://tlylft.github.io/python/python/unique_id/"/>
    <id>https://tlylft.github.io/python/python/unique_id/</id>
    <published>2021-01-26T01:39:55.000Z</published>
    <updated>2021-01-26T01:43:29.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python唯一请求码生成"><a href="#python唯一请求码生成" class="headerlink" title="python唯一请求码生成"></a>python唯一请求码生成</h2><p><a href="https://www.cnblogs.com/standby/p/7021943.html" target="_blank" rel="noopener">https://www.cnblogs.com/standby/p/7021943.html</a></p><h3 id="hashlib-time"><a href="#hashlib-time" class="headerlink" title="hashlib+time"></a>hashlib+time</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import time, hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def create_id():</span><br><span class="line">    m &#x3D; hashlib.md5(str(time.perf_counter()).encode(&#39;utf-8&#39;))</span><br><span class="line">    return m.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    print(type(create_id()))</span><br><span class="line">    print(create_id())</span><br><span class="line">    print(create_id())</span><br><span class="line">    print(create_id())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python唯一请求码生成&quot;&gt;&lt;a href=&quot;#python唯一请求码生成&quot; class=&quot;headerlink&quot; title=&quot;python唯一请求码生成&quot;&gt;&lt;/a&gt;python唯一请求码生成&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblo
      
    
    </summary>
    
    
      <category term="python" scheme="https://tlylft.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>那些怪诞又实用的日常心理学</title>
    <link href="https://tlylft.github.io/reading/The_weird_and_practical_psychology/"/>
    <id>https://tlylft.github.io/reading/The_weird_and_practical_psychology/</id>
    <published>2021-01-22T06:27:48.000Z</published>
    <updated>2021-01-26T06:07:02.435Z</updated>
    
    <content type="html"><![CDATA[<p>实验1：<br>看不见的大猩猩<br><a href="https://search.bilibili.com/all?keyword=%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%A4%A7%E7%8C%A9%E7%8C%A9%E5%AE%9E%E9%AA%8C" target="_blank" rel="noopener">https://search.bilibili.com/all?keyword=%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%A4%A7%E7%8C%A9%E7%8C%A9%E5%AE%9E%E9%AA%8C</a><br>描述：<br>几个大学生穿着白色或黑色的衣服在传球，一开始你会被告知“一会会问你穿黑色衣服的人互相传了几次球”然后你就会仔细的看着穿黑衣服的人传球，等到结束后会问你传球次数以及有没有看到什么奇怪的东西，传球次数只要认真看了基本都能答对，但是有相当一部分人表示自己没看到奇怪的东西，而一部分人表示自己看到了一只大猩猩走了过去。<br>说明：<br>简单的来说，就是所谓我们的视觉盲区。<br>你所看到的，只是你想看到的世界。你所经历的事情和环境，也许也错过了很多信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实验1：&lt;br&gt;看不见的大猩猩&lt;br&gt;&lt;a href=&quot;https://search.bilibili.com/all?keyword=%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%A4%A7%E7%8C%A9%E7%8C%A9%E5%AE
      
    
    </summary>
    
    
      <category term="reading" scheme="https://tlylft.github.io/categories/reading/"/>
    
    
  </entry>
  
  <entry>
    <title>pycharm配置</title>
    <link href="https://tlylft.github.io/tools/pycharm/"/>
    <id>https://tlylft.github.io/tools/pycharm/</id>
    <published>2021-01-21T03:09:13.000Z</published>
    <updated>2021-01-21T03:10:52.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件头设置"><a href="#文件头设置" class="headerlink" title="文件头设置"></a>文件头设置</h3><h3 id="docker连接"><a href="#docker连接" class="headerlink" title="docker连接"></a>docker连接</h3><p><a href="https://blog.csdn.net/fanxl10/article/details/106878238" target="_blank" rel="noopener">Flask + Gunicorn + Docker部署新手教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件头设置&quot;&gt;&lt;a href=&quot;#文件头设置&quot; class=&quot;headerlink&quot; title=&quot;文件头设置&quot;&gt;&lt;/a&gt;文件头设置&lt;/h3&gt;&lt;h3 id=&quot;docker连接&quot;&gt;&lt;a href=&quot;#docker连接&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="tools" scheme="https://tlylft.github.io/categories/tools/"/>
    
    
      <category term="tools" scheme="https://tlylft.github.io/tags/tools/"/>
    
      <category term="pycharm" scheme="https://tlylft.github.io/tags/pycharm/"/>
    
  </entry>
  
  <entry>
    <title>flask 部署(gunicorn, docker, nginx)</title>
    <link href="https://tlylft.github.io/python/Flask/flask_docker_deploy/"/>
    <id>https://tlylft.github.io/python/Flask/flask_docker_deploy/</id>
    <published>2021-01-21T02:36:07.000Z</published>
    <updated>2021-01-26T06:10:06.248Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">项目拷贝后，直接运行</span><br><span class="line">python main.py</span><br><span class="line">nohup python main.py &gt;nohup_path.txt &amp;</span><br></pre></td></tr></table></figure><h3 id="flask-docker"><a href="#flask-docker" class="headerlink" title="flask + docker"></a>flask + docker</h3><p>Dockerfile view<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.7</span><br><span class="line">WORKDIR &#x2F;project&#x2F;nlp_platform</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line">RUN mkdir &#x2F;logs; pip install -r requirements.txt -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line"></span><br><span class="line">CMD [&quot;python&quot;, &quot;run.py&quot;]</span><br></pre></td></tr></table></figure><br><strong>注意： flask中设置host为0.0.0.0才能被外部调用，127.0.0.1只能在docker内被主机调用，不能产生网络端口映射</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run(host&#x3D;&#39;0.0.0.0&#39;,port&#x3D;8000)</span><br></pre></td></tr></table></figure></p><p>docker 镜像构建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 10.37.144.182:8002&#x2F;nlp&#x2F;nlp_platform:v0.1 .</span><br><span class="line"></span><br><span class="line">docker push  10.37.144.182:8002&#x2F;nlp&#x2F;nlp_platform:v0.1</span><br><span class="line"></span><br><span class="line">docker run --name platform -dit -p 8004:8000 nlp_platform:v0.1</span><br></pre></td></tr></table></figure></p><h3 id="flask-gunicorn-docker"><a href="#flask-gunicorn-docker" class="headerlink" title="flask + gunicorn + docker"></a>flask + gunicorn + docker</h3><p>参考：<a href="https://zhuanlan.zhihu.com/p/78432719?hmsr=toutiao.io" target="_blank" rel="noopener">用Docker部署Flask应用</a><br><strong>什么是gunicorn?</strong><br><a href="https://zhuanlan.zhihu.com/p/102716258" target="_blank" rel="noopener">Gunicorn介绍</a><br>简单说：做了多进程管理<br>在管理 worker 上，使用了 pre-fork 模型，即一个 master 进程管理多个 worker 进程，所有请求和响应均由 Worker 处理。Master 进程是一个简单的 loop, 监听 worker 不同进程信号并且作出响应。比如接受到 TTIN 提升 worker 数量，TTOU 降低运行 Worker 数量。如果 worker 挂了，发出 CHLD, 则重启失败的 worker, 同步的 Worker 一次处理一个请求。<br><strong>gunicorn的应用</strong><br><a href="https://www.jianshu.com/p/69e75fc3e08e" target="_blank" rel="noopener">gunicorn 配置参数详解</a><br>在windows环境中不能运行！！！！！！</p><ol><li>配置gunicorn文件[gunicorn_conf.py]<br>简单的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workers &#x3D; 5    # 定义同时开启的处理请求的进程数量，根据网站流量适当调整，建议workers 数量是 (2*CPU) + 1</span><br><span class="line">worker_class &#x3D; &quot;gevent&quot;   # 采用gevent库，支持异步处理请求，提高吞吐量</span><br><span class="line">bind &#x3D; &quot;0.0.0.0:8888&quot;    # 监听IP放宽，以便于Docker之间、Docker和宿主机之间的通信</span><br></pre></td></tr></table></figure>复杂的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import multiprocessing</span><br><span class="line"></span><br><span class="line"># !监听地址和端口</span><br><span class="line">bind &#x3D; &#39;0.0.0.0:8888&#39;</span><br><span class="line"></span><br><span class="line"># !worker进程的数量。建议值2-4 x $(NUM_CORES)， 缺省为1。</span><br><span class="line">workers &#x3D; multiprocessing.cpu_count() * 2 + 1</span><br><span class="line"></span><br><span class="line"># 每个进程的开启线程</span><br><span class="line"># threads &#x3D; multiprocessing.cpu_count() * 2</span><br><span class="line"></span><br><span class="line"># !服务器中在pending状态的最大连接数，即client处于waiting的数目。超过这个数目， client连接会得到一个error。建议值64-2048</span><br><span class="line">backlog &#x3D; 2048</span><br><span class="line"></span><br><span class="line"># !worker进程的工作方式。 有 sync, eventlet, gevent, tornado, gthread, 缺省值sync。</span><br><span class="line">worker_class &#x3D; &quot;gevent&quot;</span><br><span class="line"></span><br><span class="line"># 客户端最大同时连接数。只适用于eventlet， gevent工作方式。</span><br><span class="line"># worker_connections &#x3D; 1000</span><br><span class="line"># daemon &#x3D; False</span><br><span class="line"># debug &#x3D; True</span><br><span class="line"></span><br><span class="line">#进程名和日志</span><br><span class="line">proc_name &#x3D; &#39;gunicorn.pid&#39;</span><br><span class="line">pidfile &#x3D; &quot;log&#x2F;gunicorn.pid&quot;</span><br><span class="line">accesslog &#x3D; &quot;log&#x2F;gunicorn_access.log&quot;</span><br><span class="line"># access_log_format &#x3D; &#39;%(h)s %(t)s %(U)s %(q)s&#39;</span><br><span class="line">errorlog &#x3D; &quot;log&#x2F;gunicorn_error.log&quot;</span><br><span class="line"></span><br><span class="line">timeout &#x3D; 600  ## 指gunicorn判定启动进程timeout的时间！！ 在web服务启动初始化时间比较长时，一定要设置，在设定时间内服务未启动成功，gunicorn判定为超时，会创建新进程</span><br><span class="line">debug&#x3D;False</span><br><span class="line">capture_output &#x3D; True</span><br></pre></td></tr></table></figure></li><li>使用gunicorn运行, name为flask主程序的文件名，app为文件中的flask app变量名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn name:app -c .&#x2F;gunicorn.conf.py</span><br></pre></td></tr></table></figure><strong>docker部署</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## Dockerfile</span><br><span class="line">FROM python:3.7</span><br><span class="line">WORKDIR &#x2F;project&#x2F;nlp_platform</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line">RUN mkdir &#x2F;logs; pip install -r requirements.txt -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line"></span><br><span class="line">CMD [&quot;gunicorn&quot;, &quot;run:app&quot;, &quot;-c&quot;, &quot;.&#x2F;gunicorn_conf.py&quot;]</span><br></pre></td></tr></table></figure></li></ol><p>docker 镜像构建和使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 10.37.144.182:8002&#x2F;nlp&#x2F;nlp_platform:v0.2 .</span><br><span class="line"></span><br><span class="line">docker push  10.37.144.182:8002&#x2F;nlp&#x2F;nlp_platform:v0.2</span><br><span class="line"></span><br><span class="line">docker run --name platform -dit -p 8004:8888 nlp_platform:v0.2</span><br></pre></td></tr></table></figure></p><h3 id="flask-gunicorn-nginx-docker"><a href="#flask-gunicorn-nginx-docker" class="headerlink" title="flask +gunicorn+ nginx+docker"></a>flask +gunicorn+ nginx+docker</h3><p><a href="https://www.cnblogs.com/sui776265233/p/10913105.html" target="_blank" rel="noopener">基于docker部署的 flask +gunicorn+ nginx</a><br><a href="https://github.com/danriti/nginx-gunicorn-flask" target="_blank" rel="noopener">https://github.com/danriti/nginx-gunicorn-flask</a></p><p>Nginx_conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"> listen 80;</span><br><span class="line"> server_name &lt;your dns&gt;;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line"> proxy_pass http:&#x2F;&#x2F;0.0.0.0:5000;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://zhuanlan.zhihu.com/p/78432719?hmsr=toutiao.io" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/78432719?hmsr=toutiao.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;flask&quot;&gt;&lt;a href=&quot;#flask&quot; class=&quot;headerlink&quot; title=&quot;flask&quot;&gt;&lt;/a&gt;flask&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="https://tlylft.github.io/categories/python/"/>
    
      <category term="flask" scheme="https://tlylft.github.io/categories/python/flask/"/>
    
    
      <category term="python" scheme="https://tlylft.github.io/tags/python/"/>
    
      <category term="flask" scheme="https://tlylft.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>AI开发平台</title>
    <link href="https://tlylft.github.io/NLP/ai_platform/"/>
    <id>https://tlylft.github.io/NLP/ai_platform/</id>
    <published>2021-01-15T07:51:14.000Z</published>
    <updated>2021-01-15T08:39:33.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="百度开发平台"><a href="#百度开发平台" class="headerlink" title="百度开发平台"></a>百度开发平台</h2><p><a href="https://console.bce.baidu.com/ai/?_=1550569312984&amp;locale=zh-cn#/ai/face/overview/index" target="_blank" rel="noopener">https://console.bce.baidu.com/ai/?_=1550569312984&amp;locale=zh-cn#/ai/face/overview/index</a></p><p><a href="https://cloud.baidu.com/doc/NLP/s/Ck3pmn1l6" target="_blank" rel="noopener">SDK文档</a></p><p><a href="https://ai.baidu.com/ai-doc/REFERENCE/Ck3dwjhhu" target="_blank" rel="noopener">API鉴权认证</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;百度开发平台&quot;&gt;&lt;a href=&quot;#百度开发平台&quot; class=&quot;headerlink&quot; title=&quot;百度开发平台&quot;&gt;&lt;/a&gt;百度开发平台&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://console.bce.baidu.com/ai/?_=155056931
      
    
    </summary>
    
    
      <category term="NLP" scheme="https://tlylft.github.io/categories/NLP/"/>
    
    
  </entry>
  
  <entry>
    <title>linux ftp 搭建使用</title>
    <link href="https://tlylft.github.io/tools/ftp/"/>
    <id>https://tlylft.github.io/tools/ftp/</id>
    <published>2021-01-11T01:07:10.000Z</published>
    <updated>2021-01-11T02:32:10.368Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.hangge.com/blog/cache/detail_2449.html" target="_blank" rel="noopener">https://www.hangge.com/blog/cache/detail_2449.html</a><br>主动模式和被动模式：<br><a href="https://blog.csdn.net/newborn2012/article/details/15812821/" target="_blank" rel="noopener">https://blog.csdn.net/newborn2012/article/details/15812821/</a><br><a href="https://www.imooc.com/article/15136" target="_blank" rel="noopener">https://www.imooc.com/article/15136</a></p><ol><li>拉取镜像<br>docker pull fauria/vsftpd</li><li>启动服务<blockquote><p>/var/ftp:/home/vsftpd：映射 docker 容器 ftp 文件根目录（冒号前面是宿主机的目录，建议宿主机使用 /var 这样公共权限文件夹，如果使用类似 /home 这样的目录可能会造成客户端无法连接上服务器问题）<br>-p：映射 docker 端口（冒号前面是宿主机的端口）<br>-e FTP_USER=test -e FTP_PASS=test ：设置默认的用户名密码（都为 test）<br>PASV_ADDRESS：宿主机 ip，当需要使用被动模式时必须设置。<br>PASV_MIN_PORT~ PASV_MAX_PORT：给客服端提供下载服务随机端口号范围，默认 21100-21110，与前面的 docker 端口映射设置成一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v &#x2F;data&#x2F;kubeflow&#x2F;data&#x2F;kubeflow-nlp-pvc-pvc-b1c49f7e-760c-4b9b-a891-8a5494eec53a:&#x2F;home&#x2F;vsftpd \</span><br><span class="line">-p 8000:20 -p 8001:21 -p  21100-21110:21100-21110 \</span><br><span class="line">-e FTP_USER&#x3D;test -e FTP_PASS&#x3D;test \</span><br><span class="line">-e PASV_ADDRESS&#x3D;10.37.144.183 \</span><br><span class="line">-e PASV_MIN_PORT&#x3D;21100 -e PASV_MAX_PORT&#x3D;21110 \</span><br><span class="line">--name vsftpd --restart&#x3D;always fauria&#x2F;vsftpd</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>ftp://test:test@10.37.144.183:8001/model.joblib</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.hangge.com/blog/cache/detail_2449.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hangge.com/blog/cache/detail_2449
      
    
    </summary>
    
    
      <category term="tools" scheme="https://tlylft.github.io/categories/tools/"/>
    
      <category term="ftp" scheme="https://tlylft.github.io/categories/tools/ftp/"/>
    
    
  </entry>
  
  <entry>
    <title>文本分类</title>
    <link href="https://tlylft.github.io/NLP/classification/text_clas/"/>
    <id>https://tlylft.github.io/NLP/classification/text_clas/</id>
    <published>2021-01-06T02:35:07.000Z</published>
    <updated>2021-01-08T06:13:44.819Z</updated>
    
    <content type="html"><![CDATA[<p>中文文本分类，TextCNN，TextRNN，FastText，TextRCNN，BiLSTM_Attention, DPCNN, Transformer, 基于pytorch，开箱即用。<br><a href="https://github.com/649453932/Chinese-Text-Classification-Pytorch" target="_blank" rel="noopener">https://github.com/649453932/Chinese-Text-Classification-Pytorch</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;中文文本分类，TextCNN，TextRNN，FastText，TextRCNN，BiLSTM_Attention, DPCNN, Transformer, 基于pytorch，开箱即用。&lt;br&gt;&lt;a href=&quot;https://github.com/649453932/C
      
    
    </summary>
    
    
      <category term="NLP" scheme="https://tlylft.github.io/categories/NLP/"/>
    
    
  </entry>
  
  <entry>
    <title>python序列化存储 pickle, joblib, json</title>
    <link href="https://tlylft.github.io/python/python/python_storage/"/>
    <id>https://tlylft.github.io/python/python/python_storage/</id>
    <published>2021-01-05T02:33:10.000Z</published>
    <updated>2021-01-05T07:34:29.511Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/red_stone1/article/details/71156441" target="_blank" rel="noopener">pickle模块和joblib模块浅析</a></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a><strong>区别</strong></h3><p>json 和 pickle 更多应用在字符串和字典格式的转换中。<br>joblib 更多应用于磁盘存储。<br>joblib更适合大数据量的模型，比pickle更加高效，但是joblib只能将对象存储在磁盘文件中，不能保存为字符串。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#对象保存为一个字符串</span><br><span class="line">&gt;&gt;&gt; import pickle</span><br><span class="line">&gt;&gt;&gt; a1 &#x3D; (&quot;pickle&quot;,123,[4,5,6],&#123;&#39;A&#39;:1,&#39;B&#39;:2&#125;)</span><br><span class="line">&gt;&gt;&gt; p1 &#x3D; pickle.dumps(a1)</span><br><span class="line">&gt;&gt;&gt; a2 &#x3D; pickle.loads(p1)</span><br><span class="line"></span><br><span class="line"># 高效 的二进制来存储</span><br><span class="line">&gt;&gt;&gt; import pickle</span><br><span class="line">&gt;&gt;&gt; a1 &#x3D; (&quot;pickle&quot;,123,[4,5,6],&#123;&#39;A&#39;:1,&#39;B&#39;:2&#125;)</span><br><span class="line">&gt;&gt;&gt; p1 &#x3D; pickle.dumps(a1,True)</span><br><span class="line">&gt;&gt;&gt; a2 &#x3D; pickle.loads(p1)</span><br><span class="line"></span><br><span class="line"># 多个对象保存在磁盘文件中：</span><br><span class="line">with open(train_out_path, &#39;wb&#39;) as train_file:</span><br><span class="line">    dump((x_train, y_train), train_file)</span><br></pre></td></tr></table></figure><h4 id="joblib"><a href="#joblib" class="headerlink" title="joblib"></a>joblib</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from joblib import dump, load</span><br><span class="line">dump((x_train, y_train), train_out_path)</span><br><span class="line">x_train, y_train &#x3D; load(train_data_path)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/red_stone1/article/details/71156441&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pickle模块和joblib模块浅析&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;区别
      
    
    </summary>
    
    
      <category term="python" scheme="https://tlylft.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://tlylft.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>文本标注工具doccano</title>
    <link href="https://tlylft.github.io/NLP/label/doccano/"/>
    <id>https://tlylft.github.io/NLP/label/doccano/</id>
    <published>2020-12-31T02:59:36.000Z</published>
    <updated>2021-01-04T05:40:15.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本标注工具doccano"><a href="#文本标注工具doccano" class="headerlink" title="文本标注工具doccano"></a>文本标注工具doccano</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --rm --name doccano \</span><br><span class="line">  -e &quot;ADMIN_USERNAME&#x3D;admin&quot; \</span><br><span class="line">  -e &quot;ADMIN_EMAIL&#x3D;admin@example.com&quot; \</span><br><span class="line">  -e &quot;ADMIN_PASSWORD&#x3D;password&quot; \</span><br><span class="line">  -p 8003:8000 chakkiworks&#x2F;doccano</span><br></pre></td></tr></table></figure><p><a href="http://10.37.144.182:8003/" target="_blank" rel="noopener">http://10.37.144.182:8003/</a>   doccano 用户名：admin  密码：password  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文本标注工具doccano&quot;&gt;&lt;a href=&quot;#文本标注工具doccano&quot; class=&quot;headerlink&quot; title=&quot;文本标注工具doccano&quot;&gt;&lt;/a&gt;文本标注工具doccano&lt;/h1&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; cla
      
    
    </summary>
    
    
      <category term="NLP" scheme="https://tlylft.github.io/categories/NLP/"/>
    
      <category term="label" scheme="https://tlylft.github.io/categories/NLP/label/"/>
    
    
      <category term="NLP" scheme="https://tlylft.github.io/tags/NLP/"/>
    
      <category term="label" scheme="https://tlylft.github.io/tags/label/"/>
    
      <category term="doccano" scheme="https://tlylft.github.io/tags/doccano/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 安装</title>
    <link href="https://tlylft.github.io/tools/kubernetes/"/>
    <id>https://tlylft.github.io/tools/kubernetes/</id>
    <published>2020-12-30T01:31:22.000Z</published>
    <updated>2021-01-11T09:58:08.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><ol><li><p><a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener">安装docker</a><br>依赖Docker CE， 我安装的18.06.1-ce</p></li><li><p><a href="https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener">安装kubectl</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;20&quot;, GitVersion:&quot;v1.20.0&quot;, GitCommit:&quot;af46c47ce925f4c4ad5cc8d1fca46c7b77d13b38&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-12-08T17:59:43Z&quot;, GoVersion:&quot;go1.15.5&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;17&quot;, GitVersion:&quot;v1.17.14&quot;, GitCommit:&quot;f238f5142728be4033c37aa0ad69bf806090beae&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-11-11T13:03:54Z&quot;, GoVersion:&quot;go1.13.15&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://www.kubernetes.org.cn/k8s" target="_blank" rel="noopener">中文文档</a></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get knative -n kubeflow</span><br><span class="line">kubectl get inferenceservice  -n kubeflow</span><br><span class="line">kubectl get ksvc -n kubeflow</span><br><span class="line">kubectl get revision  -n kubeflow</span><br><span class="line"> kubectl get pod -l model&#x3D;sklearn-from-uri -n kubeflow</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;install&quot;&gt;&lt;a href=&quot;#install&quot; class=&quot;headerlink&quot; title=&quot;install&quot;&gt;&lt;/a&gt;install&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/se
      
    
    </summary>
    
    
      <category term="tools" scheme="https://tlylft.github.io/categories/tools/"/>
    
      <category term="k8s" scheme="https://tlylft.github.io/categories/tools/k8s/"/>
    
    
      <category term="k8s" scheme="https://tlylft.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>docker打包python程序</title>
    <link href="https://tlylft.github.io/tools/docker_python/"/>
    <id>https://tlylft.github.io/tools/docker_python/</id>
    <published>2020-12-23T11:08:57.000Z</published>
    <updated>2020-12-23T11:28:04.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="程序打包"><a href="#程序打包" class="headerlink" title="程序打包"></a>程序打包</h3><p><a href="https://blog.csdn.net/weixin_41907511/article/details/85337505" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41907511/article/details/85337505</a></p><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><p><a href="https://blog.csdn.net/magerguo/article/details/72514813" target="_blank" rel="noopener">https://blog.csdn.net/magerguo/article/details/72514813</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;程序打包&quot;&gt;&lt;a href=&quot;#程序打包&quot; class=&quot;headerlink&quot; title=&quot;程序打包&quot;&gt;&lt;/a&gt;程序打包&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_41907511/article/details
      
    
    </summary>
    
    
      <category term="tools" scheme="https://tlylft.github.io/categories/tools/"/>
    
    
      <category term="tools" scheme="https://tlylft.github.io/tags/tools/"/>
    
      <category term="docker" scheme="https://tlylft.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>python序列化 处理json格式和文件</title>
    <link href="https://tlylft.github.io/python/python/python_json/"/>
    <id>https://tlylft.github.io/python/python/python_json/</id>
    <published>2020-12-23T10:28:26.000Z</published>
    <updated>2020-12-23T11:06:10.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/linwow/p/10693781.html" target="_blank" rel="noopener">https://www.cnblogs.com/linwow/p/10693781.html</a></p><h2 id="1-几种方式的介绍"><a href="#1-几种方式的介绍" class="headerlink" title="1. 几种方式的介绍"></a>1. 几种方式的介绍</h2><p> 我们把对象(变量)从内存中变成可存储或传输的过程称之为<strong>序列化</strong>，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。</p><p><strong>为什么要序列化？</strong></p><ol><li><p>持久保存状态<br>在断电或重启程序之前将程序当前内存中所有的数据都保存下来（保存到文件中），以便于下次程序执行能够从文件中载入之前的数据，然后继续执行，这就是序列化。</p></li><li><p>跨平台数据交互<br>序列化之后，不仅可以把序列化后的内容写入磁盘，还可以通过网络传输到别的机器上，如果收发的双方约定好实用一种序列化的格式，那么便打破了平台/语言差异化带来的限制，实现了跨平台数据交互。</p></li></ol><p>在python中，有专门处理json格式的模块—— json , joblib 和 pickle模块</p><p><strong>json 和 pickle 区别</strong><br>json模块和pickle模块都有 dumps、dump、loads、load四种方法，而且用法一样。<br>不一样的是json模块序列化出来的是通用格式，其它编程语言都认识，就是普通的字符串，<br>而picle模块序列化出来的只有python可以认识，其他编程语言不认识的，表现为乱码</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><h3 id="2-1-json-包的使用"><a href="#2-1-json-包的使用" class="headerlink" title="2.1. json 包的使用"></a>2.1. json 包的使用</h3><p><a href="https://www.cnblogs.com/chen55555/articles/10246730.html" target="_blank" rel="noopener">https://www.cnblogs.com/chen55555/articles/10246730.html</a></p><h4 id="2-1-1-基本操作"><a href="#2-1-1-基本操作" class="headerlink" title="2.1.1. 基本操作"></a>2.1.1. 基本操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import json </span><br><span class="line">dict &#x3D; &#123;&#39;a&#39;:&#39;1111&#39;,&#39;b&#39;:&#39;2222&#39;,&#39;c&#39;:&#39;3333&#39;,&#39;d&#39;:&#39;4444&#39;&#125;</span><br></pre></td></tr></table></figure><p><strong>json.dumps() 将字典类型转化成字符串类型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ensure_ascii&#x3D;False 显示中文</span><br><span class="line">str &#x3D; json.dumps(dict, ensure_ascii&#x3D;False)</span><br></pre></td></tr></table></figure><br><strong>json.loads()将字符串类型转化成字典类型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json_dict &#x3D;  json.loads(str)</span><br></pre></td></tr></table></figure><br><strong>json.dump()用于将dict类型的数据转成str，并写入到json文件中。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">json.dump(dict_name, open(filename, &quot;w&quot;))</span><br><span class="line"># 或</span><br><span class="line">with open(filename, &quot;w&quot;) as f:  </span><br><span class="line">    f.write(dict_name)  </span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><br><strong>json.load()用于从json文件中读取数据。得到字典类型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsObj &#x3D; json.load(open(filename))</span><br></pre></td></tr></table></figure></p><h4 id="读写的文件中存在多个json"><a href="#读写的文件中存在多个json" class="headerlink" title="读写的文件中存在多个json"></a>读写的文件中存在多个json</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with open(file,encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    for line in f.readlines():</span><br><span class="line">        # 按行加载</span><br><span class="line">        line_json &#x3D; json.loads(line)</span><br><span class="line">        text &#x3D; line_json[&#39;text&#39;]</span><br></pre></td></tr></table></figure><h3 id="jsonlines-包的使用"><a href="#jsonlines-包的使用" class="headerlink" title="jsonlines 包的使用"></a>jsonlines 包的使用</h3><p>说是可以读写多行，待验证<br><a href="https://blog.csdn.net/weixin_43420032/article/details/88547515" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43420032/article/details/88547515</a><br><a href="https://blog.csdn.net/weixin_38604274/article/details/105158918" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38604274/article/details/105158918</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/linwow/p/10693781.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/linwow/p/10693781.html&lt;/a
      
    
    </summary>
    
    
      <category term="python" scheme="https://tlylft.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://tlylft.github.io/tags/python/"/>
    
  </entry>
  
</feed>
